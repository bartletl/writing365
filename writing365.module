<?php

/**
 * @file
 * Enables journals used to encourage student writing. Extends Drupal Core's blog module
 */

/**
 * Implements hook_node_info().
 * Define module-provided node types.
 *
 *This hook allows a module to define one or more of its own node types. For example, the blog module uses it to define a blog node-type named "Blog entry." The name and attributes of each desired node type are specified in an array returned by the hook.
 *
 *Only module-provided node types should be defined through this hook. User- provided (or 'custom') node types should be defined only in the 'node_type' database table, and should be maintained by using the node_type_save() and node_type_delete() functions.
 *
 *Return value
 *
 *An array of information defining the module's node types. The array contains a sub-array for each node type, with the machine-readable type name as the key. Each sub-array has up to 10 attributes. Possible attributes:
 *
 *name: (required) The human-readable name of the node type.
 *base: (required) The base string used to construct callbacks corresponding to this node type (for example, if base is defined as example_foo, then example_foo_insert will be called when inserting a node of that type). This string is usually the name of the module, but not always.
 *description: (required) A brief description of the node type.
 *help: (optional) Help information shown to the user when creating a node of this type.
 *has_title: (optional) A Boolean indicating whether or not this node type has a title field.
 *title_label: (optional) The label for the title field of this content type.
 *locked: (optional) A Boolean indicating whether the administrator can change the machine name of this type. FALSE = changeable (not locked), TRUE = unchangeable (locked).
 *The machine name of a node type should contain only letters, numbers, and underscores. Underscores will be converted into hyphens for the purpose of constructing URLs.
 *
 *All attributes of a node type that are defined through this hook (except for 'locked') can be edited by a site administrator. This includes the machine-readable name of a node type, if 'locked' is set to FALSE.
 *
 *Related topics
 *
 *Hooks
 *Allow modules to interact with the Drupal core.
 *Node API Hooks
 *Functions to define and modify content types.
 *3 functions implement hook_node_info()
 *3 invocations of hook_node_info()
 *File
 *
 *modules/node/node.api.php, line 914
 *Hooks provided by the Node module.
 *
 */
function writing365_node_info() {
  return array(
    'writing365' => array(
      'name' => t('Writing 365 journal'),
      'base' => 'writing365',
      'description' => t('Use for Writing 365 journals. Every student gets a personal journal.'),
      'help' => 'admin/help#writing365',
      'has_title' => TRUE,
      'locked' => TRUE,
    )
  );
}

/**
 * Implements hook_user_view().
 * 7 user.api.php	hook_user_view($account, $view_mode, $langcode)
 * The user's account information is being displayed.
 * 
 * The module should format its custom additions for display and add them to the $account->content array.
 * 
 * Note that when this hook is invoked, the changes have not yet been written to the database, because a database transaction is still in progress. The transaction is not finalized until the save operation is entirely completed and user_save() goes out of scope. You should not rely on data in the database at this time as it is not updated yet. You should also note that any write/update database queries executed from this hook are also not committed immediately. Check user_save() and db_transaction() for more info.
 * 
 * Parameters
 * 
 * $account: The user object on which the operation is being performed.
 * 
 * $view_mode: View mode, e.g. 'full'.
 * 
 * $langcode: The language code used for rendering.
 * 
 * See also
 * 
 * hook_user_view_alter()
 * 
 * hook_entity_view()
 * 
 * Related topics
 * 
 * Hooks
 * Allow modules to interact with the Drupal core.
 * 4 functions implement hook_user_view()
 * 4 invocations of hook_user_view()
 * File
 * 
 * modules/user/user.api.php, line 348
 * Hooks provided by the User module.
 * 
 */
function writing365_user_view($account) {
  if (user_access('create writing365 content', $account)) {
    $account->content['summary']['writing365'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Writing 365'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent journal entries'), "journal/$account->uid", array('attributes' => array('title' => t("Read !username's latest journal entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('journal')),
    );
  }
}

/**
 * Implements hook_help().
 */
function writing365_help($path, $arg) {
  switch ($path) {
    case 'admin/help#writing365':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Writing 365 module extends the Drupal Core blog module and allows registered users to maintain a daily online journal. Writing 365 journals are made up of individual <em>journal entries</em>. By default, the journal entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@blog'>Blog module</a>.", array('@blog' => 'http://drupal.org/documentation/modules/blog/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user blogs') . '</dt>';
      $output .= '<dd>' . t("Each student's journal entries are automatically displayed with a link to the user's main journal page. You can create as many single-user journals as you have site users with permission to create Writing 360 journal content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user blogs') . '</dt>';
      $output .= '<dd>' . t("For instructors, journal entries from each student blog are also aggregated into one central interface, which displays the journal entries of all students in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Blogs</em> menu item added to the Navigation menu, which displays all blogs available on your site, and a <em>My blog</em> item displaying the current user's blog entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Blog module also creates a default <em>Recent blog posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function writing365_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function writing365_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Writing 365'), 'writing365'), l(t("!name's journal", array('!name' => format_username($node))), 'writing365/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 * 7 node.api.php	hook_node_view($node, $view_mode, $langcode)
 *Act on a node that is being assembled before rendering.
 *
 *The module may add elements to $node->content prior to rendering. This hook will be called after hook_view(). The structure of $node->content is a renderable array as expected by drupal_render().
 *
 *When $view_mode is 'rss', modules can also add extra RSS elements and namespaces to $node->rss_elements and $node->rss_namespaces respectively for the RSS item generated for this node. For details on how this is used, see node_feed().
 *
 *Parameters
 *
 *$node: The node that is being assembled for rendering.
 *
 *$view_mode: The $view_mode parameter from node_view().
 *
 *$langcode: The language code used for rendering.
 *
 *See also
 *
 *blog_node_view()
 *
 *forum_node_view()
 *
 *comment_node_view()
 *
 *hook_entity_view()
 *
 *Related topics
 *
 *Hooks
 *Allow modules to interact with the Drupal core.
 *Node API Hooks
 *Functions to define and modify content types.
 *8 functions implement hook_node_view()
 *4 invocations of hook_node_view()
 *
 */
function writing365_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'journal' && (arg(0) != 'journal' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['journal_usernames_journal'] = array(
        'title' => t("!username's journal", array('!username' => format_username($node))),
        'href' => "writing365/$node->uid",
        'attributes' => array('title' => t("Read !username's latest journal entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['writing365'] = array(
        '#theme' => 'links__node__writing365',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 * see documentation at 
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 * 
 * If stuff is broken, look here
 */
function writing365_menu() {
  $items['writing365'] = array(
    'title' => 'Journal',
    'page callback' => 'writing365_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'writing365.pages.inc',
  );
  $items['writing365/%user_uid_optional'] = array(
    'title' => 'My journal',
    'page callback' => 'writing365_page_user',
    'page arguments' => array(1),
    'access callback' => 'writing365_page_user_access',
    'access arguments' => array(1),
    'file' => 'writing365.pages.inc',
  );
  $items['writing365/%user/feed'] = array(
    'title' => 'Writing 365',
    'page callback' => 'writing365_feed_user',
    'page arguments' => array(1),
    'access callback' => 'writing365_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'writing365.pages.inc',
  );
  $items['writing365/feed'] = array(
    'title' => 'Journal',
    'page callback' => 'writing365_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'writing365.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function writing365_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add action link to 'node/add/writing365' on 'blog' page.
  if ($root_path == 'writing365') {
    $item = menu_get_item('node/add/writing365');
    if ($item['access']) {
      $item['title'] = t('Create new journal entry');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Provide a helper action link to the author on the 'blog/%' page.
  elseif ($root_path == 'writing365/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['writing365'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create journal entry')) {
      $data['actions']['output']['writing365']['#link']['title'] = t('Create new journal entry.');
      $data['actions']['output']['writing365']['#link']['href'] = 'node/add/writing365';
    }
    else {
      $data['actions']['output']['writing365']['#link']['title'] = t('You are not allowed to create a new journal entry.');
    }
  }
}

/**
 * Access callback for user blog pages.
 */
function writing365_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a blog to 'exist' the user must either be able to
  // create new blog entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create journal entry', $account) || _writing365_post_exists($account));
}

/**
 * Helper function to determine if a user has journal posts already.
 */
function _writing365_post_exists($account) {
  return (bool)db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'journal')
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->range(0, 1)
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_block_info().
 */
function writing365_block_info() {
  $block['recent']['info'] = t('Recent journal entries');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function writing365_block_configure($delta = '') {
  if ($delta == 'recent') {
    $form['writing365_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent journal entries to display'),
      '#default_value' => variable_get('writing365_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function writing365_block_save($delta = '', $edit = array()) {
  if ($delta == 'recent') {
    variable_set('writing365_block_count', $edit['writing365_block_count']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 blog titles.
 */
function writing365_block_view($delta = '') {
  global $user;

  if (user_access('access content')) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('type', 'journal')
      ->condition('status', 1)
      ->orderBy('created', 'DESC')
      ->range(0, variable_get('writing365_block_count', 10))
      ->addTag('node_access')
      ->execute();

    if ($node_title_list = node_title_list($result)) {
      $block['subject'] = t('Recent journal entries');
      $block['content']['writing365_list'] = $node_title_list;
      $block['content']['writing365_more'] = array(
        '#theme' => 'more_link',
        '#url' => 'writing365',
        '#title' => t('Read the latest journal entries.'),
      );

      return $block;
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function writing365_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'writing365',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:JournalPost'),
      ),
    ),
  );
}
