<?php

/**
 * @file
 * Enables journals used to encourage student writing. Extends Drupal Core's blog module
 */

/**
 * Implements hook_node_info().
 */
function writing365_node_info() {
	return array (
			'writing365' => array (
					'name' => t ( 'Writing 365 Journal Entry' ),
					'base' => 'writing365',
					'description' => t ( 'Use for Writing 365 journals. Every student gets a personal journal.' ),
					'help' => t ( 'This is your personal journal and is visible only to you. Write at least 365 words in one or more sessions, and you will get credit for having written today.' ),
					'has_title' => TRUE,
					'locked' => TRUE 
			) 
	);
}

/**
 * Define the Writing 365 module's roles and weights
 */
function writing365_default_roles() {
	$roles = array ();
	$roles ['Instructor'] = array (
			'name' => 'instructor',
			'weight' => '3' 
	);
	return $roles;
}

/**
 * implements hook_user_login
 */
function writing365_user_login(&$edit, $account) {
	global $user;
	user_load ( $user->uid );
	// check to see if the user has logged in and posted a journal entry today
	$userID = $user->uid;
	$todaysDate = date ( "Y-m-d" );
	$message = "User " . $userID . " logged in on " . $todaysDate . ".";
	watchdog ( WATCHDOG_NOTICE, $message );
	$lastLoginUnix = db_query ( 'Select access from {users} where uid = :uid', array (
			':uid' => $userID 
	) )->fetchField ();
	$lastLoginHumanReadable = date ( "Y-m-d", $lastLoginUnix );
	if ($todaysDate == $lastLoginHumanReadable) {
		watchdog ( WATCHDOG_NOTICE, 'user logged in previously today' );
		// @todo this is the WRONG query. Needs a timestamp parameter
		$nid = db_query ( 'Select nid from {node} where type = :type and uid = :uid', array (
				':type' => 'writing365',
				':uid' => $userID 
		) )->fetchField ();
		watchdog ( WATCHDOG_NOTICE, 'alert' );
		if ($nid) {
			// do something
			drupal_goto ( 'node/{nid}/writing365' );
		} else {
			watchdog ( WATCHDOG_NOTICE, "user hasn't created a journal entry today." );
			// do nothing
			return;
		}
	}
}

/**
 * Development utility to check roles.
 */
function writing365_role_check($account) {
	if (! user_access ( 'view user roles' )) {
		return;
	}
	// get user roles.
	$list = $account->roles;
	if (! empty ( $list )) {
		// Prepare the information for themeing
		$variables = array (
				'items' => $list 
		);
		$content = theme ( 'item_list', $variables );
		// Attach the content to the user page according to the API.
		$account->content ['summary'] ['output'] = array (
				'#type' => 'user_profile_item',
				'#title' => t ( 'User roles' ),
				'#markup' => $content,
				'#attributes' => array (
						'class' => array (
								'content-creation' 
						) 
				) 
		);
	}
}

/**
 * Development utility to check the content types that a user can create
 */
function writing365_content_type_check($account) {
	if (! user_access ( 'view content creation permissions' )) {
		return;
	}
	// Get the defined node types
	$node_types = node_permissions_get_configured_types ();
	if (empty ( $node_types )) {
		return;
	}
	// Make an array for the list output.
	$list = array ();
	foreach ( $node_types as $type ) {
		if (user_access ( 'create ' . $type . ' content', $account )) {
			// Get the human-readable name fo the content type.
			$list [] = check_plain ( node_type_get_name ( $type ) );
		}
	}
	if (! empty ( $list )) {
		// prepare the information for theming.
		$variables = array (
				'items' => $list 
		);
		$content = theme ( 'item_list', $variables );
		// Attach the content to the user page according to the API.
		if (! isset ( $account->content ['example'] )) {
			$account->content ['example'] = array ();
		}
		$account->content ['example'] += array (
				'#type' => 'user_profile_category',
				'#attributes' => array (
						'class' => array (
								'user-member' 
						) 
				),
				'#weight' => 5,
				'#title' => t ( 'Content ' ) 
		);
		$account->content ['example'] ['output'] = array (
				'#type' => 'user_profile_item',
				'#title' => t ( 'Content creation permissions' ),
				'#markup' => $content,
				'#attributes' => array (
						'class' => array (
								'content-creation' 
						) 
				) 
		);
	}
}

/**
 * Implements hook_user_view().
 */
function writing365_user_view($account) {
	// role check debug function
	writing365_role_check ( $account );
	// content-type creation function
	writing365_content_type_check ( $account );
	
	if (user_access ( 'Writing 365 Journal Entry', $account )) {
		$account->content ['summary'] ['writing365'] = array (
				'#type' => 'user_profile_item',
				'#title' => t ( 'Writing 365 Journal' ),
				// l() escapes the attributes, so we should not escape !username here.
				'#markup' => l ( t ( 'View recent journal entries' ), "writing365/$account->uid", array (
						'attributes' => array (
								'title' => t ( "Read !username's latest journal entries.", array (
										'!username' => format_username ( $account ) 
								) ) 
						) 
				) ),
				'#attributes' => array (
						'class' => array (
								'journal' 
						) 
				) 
		);
	}
}

/**
 * Implements hook_help().
 */
function writing365_help($path, $arg) {
	switch ($path) {
		case 'admin/help#writing365' :
			$output = '<h3>' . t ( 'About' ) . '</h3>';
			$output .= '<p>' . t ( "The Writing 365 module extends the Drupal Core blog module and allows registered users to maintain a daily online journal. Writing 365 journals are made up of individual <em>journal entries</em>. By default, the journal entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@blog'>Blog module</a>.", array (
					'@blog' => 'http://drupal.org/documentation/modules/blog/' 
			) ) . '</p>';
			$output .= '<h3>' . t ( 'Uses' ) . '</h3>';
			$output .= '<dl>';
			$output .= '<dt>' . t ( 'Single-user blogs' ) . '</dt>';
			$output .= '<dd>' . t ( "Each student's journal entries are automatically displayed with a link to the user's main journal page. You can create as many single-user journals as you have site users with permission to create Writing 360 journal content." ) . '</dd>';
			$output .= '<dt>' . t ( 'Multi-user blogs' ) . '</dt>';
			$output .= '<dd>' . t ( "For instructors, journal entries from each student blog are also aggregated into one central interface, which displays the journal entries of all students in a single listing." ) . '</dd>';
			$output .= '<dt>' . t ( 'Navigation' ) . '</dt>';
			$output .= '<dd>' . t ( "There is an optional <em>Blogs</em> menu item added to the Navigation menu, which displays all blogs available on your site, and a <em>My blog</em> item displaying the current user's blog entries." ) . '</dd>';
			$output .= '<dt>' . t ( 'Blocks' ) . '</dt>';
			$output .= '<dd>' . t ( 'The Blog module also creates a default <em>Recent blog posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array (
					'@blocks' => url ( 'admin/structure/block' ) 
			) ) . '</dd>';
			$output .= '</dl>';
			return $output;
	}
}

/**
 * Implements hook_form().
 */
function writing365_form($node, $form_state) {
	return node_content_form ( $node, $form_state );
}
/**
 * Implements hook_form_BASE_FORM_alter()
 */
function writing365_form_node_form_alter(&$form, &$form_state) {
	$content_type = $form ['#node']->type;
	if ($content_type == 'writing365') {
		$form['fieldset'] = array(
		
				'#type' => 'fieldset',	
				'#title' => t('Scorecard'),
				'#weight' => -15,
				'#collapsible' => TRUE,
				'#collapsed' => TRUE,
		);
		$form['fieldset']['scorecard'] = array(
				'#markup' => writing365_scorecard(),
				'#title' => 'Scorecard',
				'#weight' => '-14',
		);	
		$form['fieldset']['foo'] = array(
			'#markup' => '<p>&nbsp;&nbsp;</p>',
			'#weight' => '-13',
		);
		
		$form['fieldset']['foo1'] = array(
				'#markup' => '<p>&nbsp;&nbsp;</p>',
				'#weight' => '-12',
		);
	}
}

/**
 * Implements hook_view().
 */
function writing365_view($node, $view_mode) {
	if ($view_mode == 'full' && node_is_page ( $node )) {
		// Breadcrumb navigation. l() escapes title, so we should not escape !name.
		drupal_set_breadcrumb ( array (
				l ( t ( 'Home' ), NULL ),
				l ( t ( 'Writing 365' ), 'writing365' ),
				l ( t ( "!name's journal", array (
						'!name' => format_username ( $node ) 
				) ), 'writing365/' . $node->uid ) 
		) );
	}
	return $node;
}
/**
 * Implements hook_node_submit()
 */

function writing365_node_submit($node,$form, &$form_state) {
	$body = $form['body']['#value'];
	$word_count = str_word_count($body);
}

/**
 * Implements hook_node_view().
 */
function writing365_node_view($node, $view_mode) {
	if ($view_mode != 'rss') {
		if ($node->type == 'writing365' && (arg ( 0 ) != 'writing365' || arg ( 1 ) != $node->uid)) {
			// This goes to l(), which escapes !username in both title and attributes.
			$links ['journal_usernames_journal'] = array (
					'title' => t ( "!username's journal", array (
							'!username' => format_username ( $node ) 
					) ),
					'href' => "writing365/$node->uid",
					'attributes' => array (
							'title' => t ( "Read !username's latest journal entries.", array (
									'!username' => format_username ( $node ) 
							) ) 
					) 
			);
			$node->content ['links'] ['writing365'] = array (
					'#theme' => 'links__node__writing365',
					'#links' => $links,
					'#attributes' => array (
							'class' => array (
									'links',
									'inline' 
							) 
					) 
			);
		}
	}
}

/**
 * Implements hook_menu().
 */
function writing365_menu() {
	$items ['writing365'] = array (
			'title' => 'Journal',
			'page callback' => 'writing365_page_last',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_SUGGESTED_ITEM,
			'file' => 'writing365.pages.inc' 
	);
	$items ['writing365/%user_uid_optional'] = array (
			'title' => 'My journal',
			'page callback' => 'writing365_page_user',
			'page arguments' => array (
					1 
			),
			'access callback' => 'writing365_page_user_access',
			'access arguments' => array (
					1 
			),
			'file' => 'writing365.pages.inc' 
	);
	$items ['writing365/%user/feed'] = array (
			'title' => 'Writing 365',
			'page callback' => 'writing365_feed_user',
			'page arguments' => array (
					1 
			),
			'access callback' => 'writing365_page_user_access',
			'access arguments' => array (
					1 
			),
			'type' => MENU_CALLBACK,
			'file' => 'writing365.pages.inc' 
	);
	$items ['writing365/feed'] = array (
			'title' => 'Journal',
			'page callback' => 'writing365_feed_last',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK,
			'file' => 'writing365.pages.inc' 
	);
	$items ['writing365/scorecard'] = array (
			'title' => 'Scorecard',
			'page callback' => 'writing365_scorecard',
			'access arguments' => array (
					'access report' 
			),
			'type' => MENU_CALLBACK 
	);
	return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function writing365_menu_local_tasks_alter(&$data, $router_item, $root_path) {
	global $user;
	
	// Add action link to 'node/add/writing365' on 'journal' page.
	if ($root_path == 'writing365') {
		$item = menu_get_item ( 'node/add/writing365' );
		if ($item ['access']) {
			$item ['title'] = t ( 'Create new journal entry' );
			$data ['actions'] ['output'] [] = array (
					'#theme' => 'menu_local_action',
					'#link' => $item 
			);
		}
	}	// Provide a helper action link to the author on the 'writing365/%' page.
	elseif ($root_path == 'writing365/%' && $router_item ['page_arguments'] [0]->uid == $user->uid) {
		$data ['actions'] ['output'] ['writing365'] = array (
				'#theme' => 'menu_local_action' 
		);
		if (user_access ( 'create journal entry' )) {
			$data ['actions'] ['output'] ['writing365'] ['#link'] ['title'] = t ( 'Create new journal entry' );
			$data ['actions'] ['output'] ['writing365'] ['#link'] ['href'] = 'node/add/writing365';
		} else {
			$data ['actions'] ['output'] ['writing365'] ['#link'] ['title'] = t ( 'You are not allowed to create a new journal entry.' );
		}
	}
}

/**
 * Access callback for user blog pages.
 *
 * This is not a hook, so we need to check how it's implemented.
 * 
 * @todo check
 */
function writing365_page_user_access($account) {
	// The visitor must be able to access the site's content.
	// For a blog to 'exist' the user must either be able to
	// create new blog entries, or it must have existing posts.
	return $account->uid && user_access ( 'access content' ) && (user_access ( 'create journal entry', $account ) || _writing365_post_exists ( $account ));
}

/**
 * Helper function to determine if a user has journal posts already.
 */
function _writing365_post_exists($account) {
	return ( bool ) db_select ( 'node', 'n' )->fields ( 'n', array (
			'nid' 
	) )->condition ( 'type', 'writing365' )->condition ( 'uid', $account->uid )->condition ( 'status', 1 )->range ( 0, 1 )->addTag ( 'node_access' )->execute ()->fetchField ();
}

/**
 * Implements hook_block_info().
 */
function writing365_block_info() {
	$block ['recent'] ['info'] = t ( 'Recent journal entries' );
	$block ['recent'] ['properties'] ['administrative'] = TRUE;
	return $block;
}

/**
 * Implements hook_block_configure().
 */
function writing365_block_configure($delta = '') {
	if ($delta == 'recent') {
		$form ['writing365_block_count'] = array (
				'#type' => 'select',
				'#title' => t ( 'Number of recent journal entries to display' ),
				'#default_value' => variable_get ( 'writing365_block_count', 10 ),
				'#options' => drupal_map_assoc ( array (
						2,
						3,
						4,
						5,
						6,
						7,
						8,
						9,
						10,
						11,
						12,
						13,
						14,
						15,
						16,
						17,
						18,
						19,
						20,
						25,
						30 
				) ) 
		);
		return $form;
	}
}

/**
 * Implements hook_block_save().
 */
function writing365_block_save($delta = '', $edit = array()) {
	if ($delta == 'recent') {
		variable_set ( 'writing365_block_count', $edit ['writing365_block_count'] );
	}
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 blog titles.
 */
function writing365_block_view($delta = '') {
	global $user;
	
	if (user_access ( 'access content' )) {
		$result = db_select ( 'node', 'n' )->fields ( 'n', array (
				'nid',
				'title',
				'created' 
		) )->condition ( 'type', 'writing365' )->condition ( 'status', 1 )->orderBy ( 'created', 'DESC' )->range ( 0, variable_get ( 'writing365_block_count', 10 ) )->addTag ( 'node_access' )->execute ();
		
		if ($node_title_list = node_title_list ( $result )) {
			$block ['subject'] = t ( 'Recent journal entries' );
			$block ['content'] ['writing365_list'] = $node_title_list;
			$block ['content'] ['writing365_more'] = array (
					'#theme' => 'more_link',
					'#url' => 'writing365',
					'#title' => t ( 'Read the latest journal entries.' ) 
			);
			
			return $block;
		}
	}
}

/**
 * Implements hook_rdf_mapping().
 */
function writing365_rdf_mapping() {
	return array (
			array (
					'type' => 'node',
					'bundle' => 'writing365',
					'mapping' => array (
							'rdftype' => array (
									'sioc:Post',
									'sioct:JournalPost' 
							) 
					) 
			) 
	);
}
function writing365_scorecard() {
	$output = '<div class="scorecardwrapper">';
	$output .= '<div class="scorecard">';
	$output .= '<div class="arrows" id="leftarrow"><img src="/sites/all/modules/writing365/images/leftarrow.jpg" title="Go back 10 tiles"></div>';	
	$output .= '<div class="box" id="dow1"><img src="/sites/all/modules/writing365/images/strike.jpg" title="Great job! You wrote at least 365 words."></div>';
	$output .= '<div class="box" id="dow2"><img src="/sites/all/modules/writing365/images/spare.jpg" title="You wrote under 365 words."></div>';
	$output .= '<div class="box" id="dow3"><img src="/sites/all/modules/writing365/images/gutter.jpg" title="You did not write any words."></div>';
	$output .= '<div class="box" id="dow4"><img src="/sites/all/modules/writing365/images/strike.jpg" title="Great job! You wrote at least 365 words."></div>';
	$output .= '<div class="box" id="dow5"><img src="/sites/all/modules/writing365/images/strike.jpg" title="Great job! You wrote at least 365 words."></div>';
	$output .= '<div class="box" id="dow6"><img src="/sites/all/modules/writing365/images/spare.jpg" title="You wrote under 365 words."></div>';
	$output .= '<div class="box" id="dow7"><img src="/sites/all/modules/writing365/images/gutter.jpg" title="You did not write any words."></div>';
	$output .= '<div class="box" id="dow8"><img src="/sites/all/modules/writing365/images/strike.jpg" title="Great job! You wrote at least 365 words."></div>';
	$output .= '<div class="box" id="dow9"><img src="/sites/all/modules/writing365/images/strike.jpg" title="Great job! You wrote at least 365 words."></div>';
	$output .= '<div class="box" id="dow10"><img src="/sites/all/modules/writing365/images/spare.jpg" title="You wrote under 365 words."></div>';
	$output .= '<div class="arrows" id="rightarrow"><img src="/sites/all/modules/writing365/images/rightarrow.jpg" title="See the most recent part of your score card!"></div> </div>';
	
	return $output;
}
